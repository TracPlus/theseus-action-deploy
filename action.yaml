name: 'Deploy'
description: 'Creates docker containers and applies Kubernetes changes.'
inputs:
  version:
    description: 'The version generated in the prepare step'
    required: true
  project-path:  # id of input
    description: 'Path to the deployable project root.'
    required: true
  container-id:
    description: 'The ID for the container in the repository.'
    required: true
  gcp-staging-id:
    description: 'Project ID for Staging environment.'
    required: true
  gcp-staging-key:
    description: 'Key for Staging environment.'
    required: true
  gcp-staging-email:
    description: 'Account email for Staging environment.'
    required: true
  gcp-staging-ip:
    description: 'IP if static required for service.'
    required: false
  gcp-production-id:
    description: 'Project ID for Production environment.'
    required: true
  gcp-production-key:
    description: 'Key for Production environment.'
    required: true
  gcp-production-email:
    description: 'Account email for Production environment.'
    required: true
  gcp-production-ip:
    description: 'IP if static required for service.'
    required: false
  staging-new-relic-app-id:
    description: 'ID of the application in New Relic.'
    required: false
  production-new-relic-app-id:
    description: 'ID of the application in New Relic.'
    required: false
  new-relic-account-id:
    description: 'ID of the account in New Relic.'
    required: false
  new-relic-api-key:
    description: 'New Relic API key.'
    required: false
  target:
    description: 'The dotnet target/runtime environment.'
    required: false
    default: 'linux-x64'
  kubernetes:
    description: 'Kubernetes deployment? if not defaults to cloud run.'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - run: |
        echo ${{ inputs.kubernetes }}
      shell: bash
    - uses: actions/download-artifact@master
      if: endsWith(github.ref, '/development') || endsWith(github.ref, '/main')
      with:
        name: publish
        path: ${{ inputs.project-path }}
    - name: Set env to staging
      if: endsWith(github.ref, '/development')
      run: |-
        echo "GCP_PROJECT=${{ inputs.gcp-staging-id }}" >> $GITHUB_ENV
        echo "CONFIGURATION=Staging" >> $GITHUB_ENV
      shell: bash
    - name: Set env to production
      if: endsWith(github.ref, '/main')
      run: |-
        echo "GCP_PROJECT=${{ inputs.gcp-production-id }}" >> $GITHUB_ENV
        echo "CONFIGURATION=Release" >> $GITHUB_ENV
      shell: bash
    - name: Setup Google Cloud Tools Staging
      if: endsWith(github.ref, '/development')
      uses: google-github-actions/setup-gcloud@v0.3.0
      with:
        project_id: ${{ inputs.gcp-staging-id }}
        service_account_email: ${{ inputs.gcp-staging-email }}
        service_account_key: ${{ inputs.gcp-staging-key }}
        export_default_credentials: true
    - name: Setup Google Cloud Tools Production
      if: endsWith(github.ref, '/main')
      uses: google-github-actions/setup-gcloud@v0.3.0
      with:
        project_id: ${{ inputs.gcp-production-id }}
        service_account_email: ${{ inputs.gcp-production-email }}
        service_account_key: ${{ inputs.gcp-production-key }}
        export_default_credentials: true
    - name: Setup Docker
      if: endsWith(github.ref, '/development') || endsWith(github.ref, '/main')
      run: |-
        gcloud auth configure-docker us-central1-docker.pkg.dev
      shell: bash
    - name: Docker Build, Tag and Push
      if: endsWith(github.ref, '/development') || endsWith(github.ref, '/main')
      run: |-
        docker build --build-arg CONFIGURATION=${{ env.CONFIGURATION }} --build-arg TARGET=${{inputs.target}} -t us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/tracstar/${{ inputs.container-id }}:${{ inputs.version }} ./${{ inputs.project-path }}
        docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/tracstar/${{ inputs.container-id }}:${{ inputs.version }}
      shell: bash
    - name: Replace variables in production Kubernetes config
      if: ${{ (endsWith(github.ref, '/main')) && (inputs.kubernetes == 'true') }}
      uses: TracPlus/replace-action@master
      with:
        files: ${{ inputs.project-path }}/Kubernetes/deployment.yaml
        replacements: '@VERSION=${{ inputs.version }},@PROJECT=${{ env.GCP_PROJECT }},@IP=${{ inputs.gcp-production-ip }}'
    - name: Replace variables in staging Kubernetes config
      if: ${{ (endsWith(github.ref, '/development')) && (inputs.kubernetes == 'true') }}
      uses: TracPlus/replace-action@master
      with:
        files: ${{ inputs.project-path }}/Kubernetes/deployment.yaml
        replacements: '@VERSION=${{ inputs.version }},@PROJECT=${{ env.GCP_PROJECT }},@IP=${{ inputs.gcp-staging-ip }}'
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set Cluster Credentials
      if: endsWith(github.ref, '/development') || endsWith(github.ref, '/main')
      run: |-
        gcloud container clusters get-credentials main --zone us-central1-a --project ${{ env.GCP_PROJECT }}
      shell: bash
    # Apply kubernetes changes.
    - name: Deploy Staging
      if: ${{ (endsWith(github.ref, '/development')) && (inputs.kubernetes == 'true') }}
      run: |-
        kubectl apply -f ${{ inputs.project-path }}/Kubernetes/deployment.yaml
      shell: bash
    - name: Deploy to Cloud Run
      if: ${{ (endsWith(github.ref, '/development')) && (inputs.kubernetes == 'false') }}
      id: deploy-staging
      uses: google-github-actions/deploy-cloudrun@v0
      with:
        service: ${{ inputs.container-id }}
        region: 'us-central1'
        image: us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/tracstar/${{ inputs.container-id }}:${{ inputs.version }}
    - name: New Relic Staging Application Deployment Marker
      if: endsWith(github.ref, '/development')
      uses: newrelic/deployment-marker-action@v1.0.0
      with:
        apiKey: ${{ inputs.new-relic-api-key }}
        accountId: ${{ inputs.new-relic-account-id }}
        applicationId: ${{ inputs.staging-new-relic-app-id }}
        revision: ${{ inputs.version }}
    - uses: trstringer/manual-approval@v1
      if: endsWith(github.ref, '/main')
      with:
        secret: ${{ github.TOKEN }}
        approvers: n00begon,swishy,NicBathgate,lmolteno,michaelmillertp
        minimum-approvals: 1
        issue-title: "Deploying ${{ inputs.version }} to production"
    - name: Deploy Production
      if: ${{ (endsWith(github.ref, '/main')) && (inputs.kubernetes == 'true') }}
      run: |-
        kubectl apply -f ${{ inputs.project-path }}/Kubernetes/deployment.yaml
      shell: bash
    - name: Deploy to Cloud Run
      if: ${{ (endsWith(github.ref, '/main')) && (inputs.kubernetes == 'false') }}
      id: deploy-production
      uses: google-github-actions/deploy-cloudrun@v0
      with:
        service: ${{ inputs.container-id }}
        region: 'us-central1'
        image: us-central1-docker.pkg.dev/${{ env.GCP_PROJECT }}/tracstar/${{ inputs.container-id }}:${{ inputs.version }}
    - name: New Relic Production Application Deployment Marker
      if: endsWith(github.ref, '/main')
      uses: newrelic/deployment-marker-action@v1.0.0
      with:
        apiKey: ${{ inputs.new-relic-api-key }}
        accountId: ${{ inputs.new-relic-account-id }}
        applicationId: ${{ inputs.production-new-relic-app-id }}
        revision: ${{ inputs.version }}
